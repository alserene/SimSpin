{"0": {
    "doc": "Basic Usage",
    "title": "A walkthrough SimSpin’s functions",
    "content": "Here, we demonstrate how to create your first mock observation. At each step, we take you through the simplest routine using the default parameters for each function. There are four steps to build your first SimSpin mock data cube: . | Making the input file | Defining the observation properties . | telescope | observing_strategy | . | Generating the observation | Writing the output to FITS | . We take you through each of these steps in the simplest form below. More extensive examples can be found in Examples. ",
    "url": "http://localhost:4000/SimSpin/basic_usage/#a-walkthrough-simspins-functions",
    "relUrl": "/basic_usage/#a-walkthrough-simspins-functions"
  },"1": {
    "doc": "Basic Usage",
    "title": "Making the input file",
    "content": "The main input for SimSpin is a galaxy simulation. This may be either an isolated galaxy model (N-body or hydro-dynamical) or a region cut out from a cosmological simulation. We define groups of particles or cells in each simulation according to the convention defined by Gadget (Springel, 2005): . | PartType0 - gas, | PartType1 - dark matter, | PartType2 - N-body disk, | PartType3 - N-body bulge, | PartType4 - stars, | PartType5 - boundary/black holes. | . This information can be structured in an HDF5 file, with groups containing each of these particle types. Alternatively, SimSpin can also process Gadget binary files (SnapFormat type 1). If you have any issues with your input simulation file, check out this page to check your input file structure. We begin by running the make_simspin_file function. This will organise the provided data into a consistent format for SimSpin processing and assign SEDs to stellar particles given their individual ages and metallicities. As this is the most time consuming process of the data-cube construction, we want to only do this once. However, a single SimSpin file can be usede multiple times for a variety of different observing strategies and telescope set ups. The variety of options available for this process is defined in the documentation here. For this basic usage example, we will use the default parameters and one of the simple simulations included in the package: . simulation_data = system.file(\"extdata\", \"SimSpin_example_Gadget\", package = \"SimSpin\") simspin_data = make_simspin_file(filename = simulation_data, disk_age = 5, # ages are assigned in Gyr bulge_age = 10, disk_Z = 0.024, # metallicities are wrt solar bulge_Z = 0.001, template = \"BC03lr\", # SSP template used write_to_file = FALSE) . The output of this function will be a list that can either be written to an Rdata file or written to an environment variable within your R session. In the case above, we assign the output to the environment variable simspin_data. Despite accepting a variety of different simulation inputs, the output of the make_simspin_file function will always be the same. The format will be a list containing 5 elements: . typeof(simspin_file) # [1] \"list\" summary(simspin_file) # Length Class Mode # header 8 -none- list # star_part 12 data.frame list # gas_part 0 -none- NULL # spectra 2 -none- list # wave 842 -none- numeric . While the length of each element may change depending on the input simulation type or observation properties requested, the element structure of the output will remain consistent. In this case, because the input file is an N-body model containing both bulge and disk particles, the resulting element spectra is a list with 2 entries (with one spectra assigned for the bulge particles and the second to the disk particles). For a hydrodynamical model, the spectra element may have many more entries due to the broader variety in stellar ages and metallicities, but will remain an element of mode list. Once a file has been produced for a single simulated galaxy, the same file can be used to produce any number of different observations. Bear in mind that the resolution and wavelength range of the spectral templates used to generate the file need to overlap with the resolution and wavelength range of the observing telescope. You can check these parameters for a given template here. A WARNING will be issued by the code if these do not match. ",
    "url": "http://localhost:4000/SimSpin/basic_usage/#making-the-input-file",
    "relUrl": "/basic_usage/#making-the-input-file"
  },"2": {
    "doc": "Basic Usage",
    "title": "Defining the observation properties",
    "content": "SimSpin acts as a virtual telescope. You can choose to observe your galaxy model in a variety of different ways with any integral field unit (IFU) instrument. This requires you to set two distinct groups of properties - the properties of the instrument used to take the observation i.e. the telescope, and the properties of the object under scrutiny i.e. the observing_strategy. telescope . This class describes the properties of the instrument used for the observation. Several current instruments are included within the class (named by either the telescope or the survey that used them i.e. SAMI, MaNGA, CALIFA and MUSE) but you can also define your own instrument by specifying the type = 'IFU'. An example of a user defined instrument is shown below, with the default parameters specified: . ifu = telescope(type = \"IFU\", # other options include pre-defined instruments fov = 15, # field-of-view in arcsec aperture_shape = \"circular\", # shape of fov wave_range = c(3700,5700), # given in angstroms wave_centre = 4700, # central wavelength given in angstroms wave_res = 1.04, # wavelength resolution in angstroms spatial_res = 0.5, # size of spatial pixels in arcsec filter = \"r\", # filter for calc of particle luminosity lsf_fwhm = 2.65, # full-width half-max of line-spread-function signal_to_noise = 10) # s/n ratio per angstrom . This will return a list that contains 11 elements. Here we have precomputed properties that will be necessary for further computation steps. The units of each returned element have been added in the final column. typeof(ifu) # [1] \"list\" summary(ifu) # Length Class Mode # Units # type 1 -none- character # describes the telescope # fov 1 -none- numeric # arcsec # aperture_shape 1 -none- character # shape of fov # wave_range 2 -none- numeric # angstrom # wave_centre 1 -none- numeric # angstrom # wave_res 1 -none- numeric # angstrom # spatial_res 1 -none- numeric # arcsec per pixel # filter 2 data.frame list # filter wavelengths and response # lsf_fwhm 1 -none- numeric # angstrom # signal_to_noise 1 -none- numeric # dimensionless fraction # sbin 1 -none- numeric # number of spatial bins across fov . observing_strategy . We describe the conditions of the object begin observed using this function. For example, the level of atmospheric blurring can be modified, the angle from which the object is observed can be changed and the distance at which the galaxy is projected can be adjusted. An example with the default parameters specified is shown here: . strategy = observing_strategy(dist_z = 0.05, # redshift distance the galaxy is placed inc_deg = 70, # projection (0 - face-on, 90 - edge-on) twist_deg = 0, # angle of observation (longitude) pointing_kpc = c(0,0), # pointing of the centre of the telescope blur = F, # whether seeing conditions are included fwhm = 2, # the fwhm of the blurring kernel in arcsec psf = \"Gaussian\") # the shape of the blurring kernel . This will return a list that contains 5 elements. If blur = T, an additional two elements will be included to describe the point-spread-function shape and size. Similar to the previous output, this class just stores precomputed properties relevant to the observed object that will be necessary in further processing steps. The units of each returned element are listed in the final column. typeof(strategy) # [1] \"list\" summary(strategy) # Length Class Mode # Units # distance 1 Distance S4 # either redshift distance (z), physical (Mpc) or angular (kpc per arcsec) # inc_deg 1 -none- numeric # degrees # twist_deg 1 -none- numeric # degrees # pointing 1 Pointing S4 # either physical (kpc) or angular (deg) # blur 1 -none- logical # FWHM specified in arcseconds . With these properties specified, we have fully described the parameters necessary to construct the observation. ",
    "url": "http://localhost:4000/SimSpin/basic_usage/#defining-the-observation-properties",
    "relUrl": "/basic_usage/#defining-the-observation-properties"
  },"3": {
    "doc": "Basic Usage",
    "title": "Generating the observation",
    "content": "Once the particulars of the observation have been defined, we can go ahead and make the observation. This means feeding our prepared parameters into the build_datacube function. An example is shown below. gadget_cube = build_datacube(simspin_file = simspin_data, telescope = ifu, observing_strategy = strategy, method = \"spectral\", write_fits = F) . We choose not to write the output directly to file (write_fits = F) and output to a variable called gadget_cube instead. The returned variable will always be a list containing 4 elements: . | the first always being the data cube, | followed by the observation summary, | raw simulation images and | mock observation images generated from collapsing the data cube. | . &gt; typeof(gadget_cube) # [1] \"list\" &gt; summary(gadget_cube) # Length Class Mode # spectral_cube 1731600 -none- numeric # observation 33 -none- list # raw_images 3 -none- list # observed_images 0 -none- NULL . add text about the structure of each element in the list . The overall format of this output will be consistent. However, the names of individual elements change to reflect the variety in the requested properties specified by telescope and observing_strategy. | For example, method = 'spectral' will return a variable spectral_cube as its first element; specifying instead method = 'velocity' will return a velocity_cube. | Similarly, if we are working in velocity mode with mass_flag = T, the images within the raw_images and observed_images elements will include an array called mass_image, rather than flux_image. | . ",
    "url": "http://localhost:4000/SimSpin/basic_usage/#generating-the-observation",
    "relUrl": "/basic_usage/#generating-the-observation"
  },"4": {
    "doc": "Basic Usage",
    "title": "Writing the output to FITS",
    "content": "Using the write_simspin_FITS function, the new observation can be written to a file that can be shared or re-analysed using observational pipelines. SimSpin can write such a FITS file using the variable produced by build_datacube. A few further descriptive details are suggested as input for users of the file later on, but the function defaults to sensible suggestions. An example is shown in the code below. write_simspin_FITS(simspin_datacube = gadget_cube, # build_datacube() output output_file = \"gadget_cube.FITS\", # filename of output file input_simspin_file = simulation_data, # filename of input sim object_name = \"GalaxyID_unknown\", # name of observed object telescope_name = \"Telescope\", # name of telescope instrument_name = \"IFU\", # name of instrument observer_name = \"Anonymous\") # name of the observer . The output of running this code will be a FITS file written at the location specified by output_file. To explore this file within your R session, we suggest using the HeaderExt branch of the package Rfits, which can be downloaded here. We use the Rfits_info function to examine the structure of the file that has been written: . library(\"Rfits\") fits_summary = Rfits_info(filename = \"gadget_cube.FITS\") fits_summary$summary # [1] \"SIMPLE = T / file does conform to FITS standard\" # [2] \"XTENSION= 'IMAGE ' / IMAGE extension\" . Here, we can clearly see that the file contains six HDU: a header table and a number of images. The exact number of HDU can vary depending on the type of observation made by build_datacube. In all cases, HDU ext = 1 will always be the header information and HDU ext = 2 will always be the data cube produced. In this case, for a spectral data cube there are a series of raw_images output into subsequent HDUs. In the case of a velocity data cube, we would also see several observed_images included in the output. The first HDU (ext = 1) is a header element describes the properties of the observation. This acts as a record for reproducing that identical observation again in the future. Information that is recorded in the header is listed below. These are consistent across all FITS files written using this function, regardless of variety in build_datacube options. head = Rfits_read_header(\"~/Desktop/gadget_cube.FITS\") head$header # [1] \"SIMPLE = T / file does conform to FITS standard\" # [2] \"BITPIX = 8 / number of bits per data pixel\" # [3] \"NAXIS = 0 / number of data axes\" # [4] \"EXTEND = T / FITS dataset may contain extensions\" # [5] \"COMMENT FITS (Flexible Image Transport System) format is defined in 'Astronomy\" # [6] \"COMMENT and Astrophysics', volume 376, page 359; bibcode: 2001A&amp;A...376..359H\" # [7] \"ORIGIN = 'SimSpin ' / Mock observation\" # [8] \"TELESCOP= 'Telescope ' / Telescope name\" # [9] \"INSTRUME= 'IFU ' / Instrument used\" #[10] \"RA = 0 / [deg] 11:41:21.1 RA (J2000) pointing\" #[11] \"DEC = 0 / [deg] -01:34:59.0 DEC (J2000) pointing\" #[12] \"EQINOX = 2000 / Standard FK5\" #[13] \"RADECSYS= 'FK5 ' / Coordinate system\" #[14] \"EXPTIME = 1320 / Integration time\" #[15] \"MJD-OBS = 58906.11 / Obs start\" #[16] \"DATE-OBS= '2021-11-16 14:47:20' / Observing date\" #[17] \"UTC = 9654 / [s] 02:40:54.000 UTC\" #[18] \"LST = 30295.18 / [s] 08:24:55.178 LST\" #[19] \"PI-COI = 'UNKNOWN ' / PI-COI name.\" #[20] \"OBSERVER= 'Anonymous' / Name of observer.\" #[21] \"REDSHIFT= 0.1 / Observed redshift.\" #[22] \"PIPEFILE= 'gadget_cube.FITS' / Filename of data product\" #[23] \"BUNIT = 'erg/s/cm**2' / Angstrom\" #[24] \"ARCFILE = '/Users/path/Library/R/4.0/library/SimSpin/extdata/SimSpin_exampl'\" #[25] \"DATAMD5 = '4aece79473a5c88f6533382655e948bf' / MD5 checksum\" #[26] \"OBJECT = 'GalaxyID_unknown' / Original target.\" . Observing details such as the name of the person who ran the file, the name of the object and the redshift at which is was observed are all included in this header. Importantly, we also record the name and location of the SimSpin file from which this observation was made (denoted as ARCFILE), enabling files to be reproduced in the future. Similarly, the SimSpin version number is recorded within the ORIGIN element. Admittedly, several aspects to this header have to be invented as they do not have any physical meaning for mock observations (RA and DEC, for example), but are required for consistency with their observational counterparts. We have made these invented properties clear to the user by stating mocked in the comment of the header parameters. Finally, we can go about reading in and working with the data cube itself. Each HDU comes along with its own header to describe the properties of the image contained i.e. the units and dimensions of the pixels. These details can be used to examine and process the data. code demonstration of reading in the spectral data cube . Similar methodology can be used to examine both the 3-dimensional data cubes and the 2-dimensional images contained within sequential HDUs. The only difference is the number of CVAL units (three for cubes versus two for images). These steps can be used to generate a mock observation of a simulated galaxy. In this Basic Usage section, we have run the simplest recipe using the inbuilt defaults of each function. In the next section, we go into details of additional functionality that may be relevant for your work. ",
    "url": "http://localhost:4000/SimSpin/basic_usage/#writing-the-output-to-fits",
    "relUrl": "/basic_usage/#writing-the-output-to-fits"
  },"5": {
    "doc": "Basic Usage",
    "title": "Basic Usage",
    "content": " ",
    "url": "http://localhost:4000/SimSpin/basic_usage/",
    "relUrl": "/basic_usage/"
  },"6": {
    "doc": "build_datacube",
    "title": "Constructing your data cube",
    "content": "Using the build_datacube function, we can now make a mock observation of a simulated galaxy. The output of this function will be a mock IFS data cube. The details of the observation will vary depending on the requested method, telescope and observing_strategy, but the format will be consistent across the board. In all cases, the output can be written to a FITS file, with headers that allow the user to reproduce these observations in the future. See an example See the source code . The following code shows the default parameters used in the make_simspin_file function. Calling the function without specifying anything other than the required input filename will produce a SimSpin file saved at the same directory location as the input simulation file with the following defaults. build_datacube(simspin_file, # REQUIRED input SimSpin file telescope, # REQUIRED telescope class description observing_strategy, # REQUIRED observing_strategy class description method = \"spectral\", # \"spectral\", \"velocity\", \"gas\" or \"sf_gas\" verbose = F, write_fits = F, output_location, # write to a FITS file? If so, where? object_name = \"GalaxyID_unknown\", # information for FITS file headers telescope_name = \"SimSpin\", observer_name = \"Anonymous\", split_save = F, cores = 1, mass_flag = F) # mass- or luminosity-weighted? . ",
    "url": "http://localhost:4000/SimSpin/docs/build_datacube.html#constructing-your-data-cube",
    "relUrl": "/docs/build_datacube.html#constructing-your-data-cube"
  },"7": {
    "doc": "build_datacube",
    "title": "Input Parameters",
    "content": "| simspin_file | The path and filename of the SimSpin file OR the output environment list element constructed using make_simspin_file. | . | telescope | An object of the telescope class that describes the properties of the observing telescope (e.g. the field of view, the spatial resolution, the wavelength resolution, etc.). | . | observing_strategy | An object of the observing_strategy class that defines the properties of the observed simulation (e.g. the projected distance, the relative pointing, the seeing conditions, etc.). | . | method | A character string that describes whether to generate a spectral data cube or a kinematic data cube. Options include \"spectral\" and \"velocity\" to produce these for the stellar component of the simulation. If wishing to analyse the kinematics of the gas, you can also specify \"gas\" or \"sf_gas\" (i.e. star forming gas) to produce a kinematic data cube of this component alone. | . | verbose | Should the code output text to describe its progress through the build? By default, this will be FALSE. | . | write_fits | Should the code write the output data cube to a FITS file? By default, this is FALSE and output will be stored in an environment variable. | . | output_location | This is an optional parameter that will only be used if write_fits = TRUE. Code behavior will depend on the text input. If location is given as just a path to a directory location, the file name will be automatically generated based on the input simspin_file name and the observing conditions. If the full path and filename are given (ending in “.fits” or “.FITS”) the generated file will be written to that location with that name. Else, in the case that write_fits = TRUE but no output_location is specified, the output FITS file will be written to the same directory as the input SimSpin file. | . | object_name | String used to describe the name of the object observed in the FITS file header. | . | telescope_name | String used to describe the name of the telescope used for the observation in the FITS file header. | . | observer_name | String used to describe the name of the person who generated the observation in the FITS file header. | . | split_save | Only used when write_fits = TRUE. Should the output FITS be saved as one file with multiple HDUs to describe the output cube and observed images (split_save = FALSE)? Or should each cube/image be saved to a seperate file (split_save = TRUE)? In this case, the file name root will be taken from the state of output_location and descriptive names will automatically be appended to individual files (i.e. “_spectral_cube.FITS”, “_velocity_image.FITS”, etc.). | . | cores | Specifiying the number of cores to run the code with parallellism turned on. | . | mass_flag | When mass_flag = TRUE and method = \"velocity\", the output kinematic properties will be mass weighted rather than luminosity weighted. By default, this parameter is set to FALSE. | . ",
    "url": "http://localhost:4000/SimSpin/docs/build_datacube.html#input-parameters",
    "relUrl": "/docs/build_datacube.html#input-parameters"
  },"8": {
    "doc": "build_datacube",
    "title": "Example",
    "content": " ",
    "url": "http://localhost:4000/SimSpin/docs/build_datacube.html#example",
    "relUrl": "/docs/build_datacube.html#example"
  },"9": {
    "doc": "build_datacube",
    "title": "build_datacube",
    "content": " ",
    "url": "http://localhost:4000/SimSpin/docs/build_datacube.html",
    "relUrl": "/docs/build_datacube.html"
  },"10": {
    "doc": "Documentation",
    "title": "Documentation",
    "content": "Use the links below to browse documentation for each SimSpin function. At these pages, input parameters are defined and a short example is provided for each case. ",
    "url": "http://localhost:4000/SimSpin/docs/documentation",
    "relUrl": "/docs/documentation"
  },"11": {
    "doc": "Examples",
    "title": "Examples",
    "content": " ",
    "url": "http://localhost:4000/SimSpin/examples/examples",
    "relUrl": "/examples/examples"
  },"12": {
    "doc": "HDF5 simulation format",
    "title": "Make your own HDF5 formatted simulation data",
    "content": "SimSpin attempts to be agnostic to the type of simulation file input (as the aim is to produce a comparable data product for all simulations). Currently, SimSpin has ability to support: . | Gadget2 simulation outputs written in binary class 1. | Gadget2 simulation outputs written in HDF5. | Galaxies cut from the EAGLE simulation and written to HDF5 using the read_eagle routines. | Galaxies cut from the Magneticum simulation and written to HDF5 using the g3read routines. | . The are two possible options available if you would like to use a different simulation output. Either raise an issue on GitHub using the button below, or read on to learn how to write your own HDF5 file. Raise an issue Write your own HDF5 . ",
    "url": "http://localhost:4000/SimSpin/examples/generating_hdf5.html#make-your-own-hdf5-formatted-simulation-data",
    "relUrl": "/examples/generating_hdf5.html#make-your-own-hdf5-formatted-simulation-data"
  },"13": {
    "doc": "HDF5 simulation format",
    "title": "Write your own",
    "content": "Hierarchical Data Format version 5 files (or HDF5 files) are designed to store large amounts of data in a structured way. For astronomers, the format is very similar to FITS files. A single file contains Groups and Datasets, as well as Metadata information that records details about each group or dataset. A Group is like a folder or directory. It can contain Datasets of arbitrary size, or other Groups. For simulation outputs in HDF5 format, we have individual Groups for each particle type. We use the PartType definitions from Gadget (Springel, 2005): . | PartType0 - gas, | PartType1 - dark matter, | PartType2 - N-body disk, | PartType3 - N-body bulge, | PartType4 - stars, | PartType5 - boundary/black holes. | . Within each of these groups, properties such as positions and velocities are stored for particles of that type. The specific properties contained depend on the type of simulation input. For example, a hydrodynamical simulation . ",
    "url": "http://localhost:4000/SimSpin/examples/generating_hdf5.html#write-your-own",
    "relUrl": "/examples/generating_hdf5.html#write-your-own"
  },"14": {
    "doc": "HDF5 simulation format",
    "title": "HDF5 simulation format",
    "content": " ",
    "url": "http://localhost:4000/SimSpin/examples/generating_hdf5.html",
    "relUrl": "/examples/generating_hdf5.html"
  },"15": {
    "doc": "Home",
    "title": "SimSpin v2.1.1",
    "content": "A package for producing mock observations of particle simulations . View on GitHub Download Citation View on ADS . SimSpin is an R-package designed to take a simulation of a galaxy and produce a “mock” integral field spectroscopy (IFS) observation. This software can be used to produce a synthetic data cube - i.e. spatial information in projection (xy) with spectral or kinematic information along the line-of-sight (z). A mock data cube can be produced using this package. This is a simple process comprised of three steps: . | Read in your particle data and produce the relevant spectra using the make_simspin_file function. | Setup the observation by defining your telescope and observing_strategy. | Build your data cube using the build_datacube. | . We incorporate some of the limitations encountered by observers so that more consistent comparisons can be made between observations and theory. From this data cube, “observables” can be measured using observational pipelines. This package, once installed, is fully documented and tested. Another implementation of this code (SimSpin v1.1.3) written in Julia is also available at SimSpin.jl developed by Gerry Gralton. The purpose of this guide is to act as a reference for users. It outlines the intended functionality and processes available in the SimSpin code. This is both a form of documentation and a collection of examples. For a basic walk-through of installing SimSpin and running a simple observation, please see the links on the left. ",
    "url": "http://localhost:4000/SimSpin/#simspin-v211",
    "relUrl": "/#simspin-v211"
  },"16": {
    "doc": "Home",
    "title": "Home",
    "content": " ",
    "url": "http://localhost:4000/SimSpin/",
    "relUrl": "/"
  },"17": {
    "doc": "Installation",
    "title": "Installing SimSpin",
    "content": "Here, we explain how to install SimSpin on your machine, listing specific instructions for both MacOSX and Linux. ",
    "url": "http://localhost:4000/SimSpin/installation/#installing-simspin",
    "relUrl": "/installation/#installing-simspin"
  },"18": {
    "doc": "Installation",
    "title": "Table of contents",
    "content": ". | Installing dependencies . | Mac OSX | Linux | . | Installing SimSpin | . SimSpin is an open source R-package, registered with the Astrophysics Source Code Library, DOI: 1903.006. This package has been built and tested on OSX and Linux operating systems using R-CMD-check and coverage of tests has been measured using CodeCov. If you are familiar with R and astronomy software, you should be able to install simply from within R using the instructions in Installing SimSpin by clicking the button below. If you encounter problems, check for missing dependencies on your operating system using the instructions below. Get started now . ",
    "url": "http://localhost:4000/SimSpin/installation/#table-of-contents",
    "relUrl": "/installation/#table-of-contents"
  },"19": {
    "doc": "Installation",
    "title": "Installing dependencies",
    "content": "You will need an installation of R to run this software. This can be downloaded from your local mirror for your operating system. We also suggest downloading the RStudio IDE for a friendly user environment. You can download these programs using the instructions at the buttons below. Install R Install RStudio . Beyond base R itself, there are some dependencies that will be required that may not exist on your machine. SimSpin requires the C libraries FFTW and HDF5. Instructions for downloading these libraries are provided below for Mac OSX and Linux machines. Mac OSX . In order to install SimSpin you will need a copy of XCode (11 or greater), which can be downloaded and installed from the Apple App Store for free. Install XCode . Once complete, you will also need to ensure that the Command Line Tools have also been installed by running the following line from within a Terminal window. This is only necessary for Xcode versions prior to v13.1. xcode-select --install . The FFTW and HDF5 packages can then be installed via the command line using Homebrew. Open a Terminal window and use the following commands: . brew install fftw brew install hdf5 . Linux . To install the FFTW and HDF5 packages on a Linux machine, open a Terminal window and use the commands: . sudo apt-get update sudo apt-get libhdf5-dev sudo apt-get libfftw3-dev . ",
    "url": "http://localhost:4000/SimSpin/installation/#installing-dependencies",
    "relUrl": "/installation/#installing-dependencies"
  },"20": {
    "doc": "Installation",
    "title": "Installing SimSpin",
    "content": "Assuming that you have successfully installed a copy of R on your machine, the most recent release of SimSpin can be installed from GitHub from within your R session using the following commands: . install.packages(\"devtools\") library(\"devtools\") install_github(\"kateharborne/SimSpin\") . Required R-package dependencies will be installed at this time. If you encounter any errors, please check that all dependency libraries are successfully installed according to your operating system using the instructions above. If all else fails, report it as an issue on GitHub. Once this installation is complete, load the package into your R session by typing: . library(\"SimSpin\") . Following this, the functionality and documentation of the package should all be available within your R session. To check the installation has been successful, try typing: . ?SimSpin . to see the cover page of the SimSpin package documentation. ",
    "url": "http://localhost:4000/SimSpin/installation/#installing-simspin-1",
    "relUrl": "/installation/#installing-simspin-1"
  },"21": {
    "doc": "Installation",
    "title": "Installation",
    "content": " ",
    "url": "http://localhost:4000/SimSpin/installation/",
    "relUrl": "/installation/"
  },"22": {
    "doc": "make_simspin_file",
    "title": "Making the input file for SimSpin",
    "content": "In order to build a data cube with SimSpin, we need to construct an input file. The purpose of this input file is to prepare all the information of the supplied simulation in a consistent format. It also aims to prepare the computationally expensive steps only once (i.e. the generation of spectra for each star). Once we have generated a SimSpin file, that file can be used as input to build_datacube many times. See an example See the source code . The following code shows the default parameters used in the make_simspin_file function. Calling the function without specifying anything other than the required input filename will produce a SimSpin file saved at the same directory location as the input simulation file with the following defaults. make_simspin_file(filename, # REQUIRED input file disk_age = 5, disk_Z = 0.024, # for N-body disk particles bulge_age = 10, bulge_Z = 0.001, # for N-body bulge particles cores = 1, write_to_file = TRUE, output, overwrite = F, template = \"BC03lr\", # template choice for spectra centre = NA, half_mass = NA, # alignment choice sph_spawn_n = 1) # gas smoothing choice . ",
    "url": "http://localhost:4000/SimSpin/docs/make_simspin_file.html#making-the-input-file-for-simspin",
    "relUrl": "/docs/make_simspin_file.html#making-the-input-file-for-simspin"
  },"23": {
    "doc": "make_simspin_file",
    "title": "Input Parameters",
    "content": "| filename | The path to the snapshot file containing the galaxy of interest. Note that this file can be a Gadget binary file or an HDF5 file directly from a simulation. In the case that your simulation outputs data in an alternative format, either see this example for more information about how to set up an HDF5 file for SimSpin, or file an issue on GitHub to see the inclusion of your format in the SimSpin code directly. | . | cores | The number of cores across which to multi-thread the problem. | . | disk_age | The age of the disk particles in Gyr, used only if the input file is an N-body model. | . | bulge_age | The age of the bulge particles in Gyr, used only if the input file is an N-body model. | . | disk_Z | The metallicity of the disk particles in units of solar, used only if the input file is an N-body model. | . | bulge_Z | The metallicity of the bulge particles in units of solar, used only if the input file is an N-body model. | . | template | The stellar templates from which to derive the SEDs for each stellar particle. Options include \"BC03lr\" (GALEXEV low resolution, Bruzual &amp; Charlot 2003), \"BC03hr\" (GALEXEV high resolution, Bruzual &amp; Charlot 2003) and \"EMILES\" (Vazdekis et al 2016). The details of these templates are shown in the additional information below. | . | write_to_file | Boolean to specify whether the list produced should be written to a “.Rdata” file or output to the environment. Default is TRUE, so that files can be re-observed without having the generate spectra each time. | . | output | The path at which the output file is written. If not provided, file will be written at the location of the input filename with the addition of “_spectra.Rdata”. | . | overwrite | If true, and the file already exists at the output location, a new file will be written over the old one. Default is FALSE. | . | centre | If simulation file contains all particles cutout from a box (rather than just particles from a single galaxy), you can specify the point around which the view should be centred. Numeric length = 3. Default is NA, in which case the system is centred around the median position of stellar particles. | . | half_mass | If simulation file contains all particles cutout from a box (rather than just particles from a single galaxy), you can the half-mass value at which the alignment function is run. Numeric length = 1. Default is NA, in which case half the total mass of the supplied simulation data is used. | . | sph_spawn_n | Numeric describing the number of gas particles with which to sample the SPH smoothing length. Default is 1, which will not spawn additional gas particles. Increasing this value increases the number of particles used to model the gas distribution. This value may need to be tested for convergence depending on the resolution of the grid used to image the gas properties at the build_datacube() stage. | . ",
    "url": "http://localhost:4000/SimSpin/docs/make_simspin_file.html#input-parameters",
    "relUrl": "/docs/make_simspin_file.html#input-parameters"
  },"24": {
    "doc": "make_simspin_file",
    "title": "Output Value",
    "content": "The output of make_simspin_file is a List element. If write_to_file = T, this list will be written to an .Rdata file at the location specified by output. Otherwise, it will be written as a variable to the environment. The list will contain the following 5 elements: . | header - List element containing eight labelled properties for data transparency and reproducability. | InputFile | the file path to the original simulation file. | . | OutputFile | the original location that the SimSpin file was written to. | . | Type | the classification of the input simulation file, one of nbody, EAGLE, or Magneticum (though this list is ever growing). | . | Template | the spectral template used to construct spectra for each stellar particle. | . | Template_LSF | the line-spread-function assoicated with the template spectra in angstrom. | . | Template_waveres | the wavelength resolution given by the binning size in angstrom. | . | Origin | the version of SimSpin used to build the file. | . | Date | the date and time at which the SimSpin file was built. | . | star_part - A data.table element containing properties of each stellar particle contained in the simulation. (NULL if no star particles are present in the simulation.) . | ID | the unique stellar particle ID number. | . | x, y and z | the stellar particle positions in each of the 3 dimensions in kpc. | . | vx, vy, vz | the stellar particle velocities in each of the 3 dimensions in km/s. | . | Mass | the stellar particle mass in solar masses. | . | sed_id | the index of the spectrum associated with each stellar particle (i.e. the respective row in the spectra element below.) | . | Metallicity | the stellar metallicity of a given particle in units of solar metallicity. For nbody models, these values are assigned by the function. For any hydrodynamical simulations, these values are pulled from the simulation file. | . | Age | the stellar age of each particle given in Gyr. For nbody models, these values are assigned by the function. For any hydrodynamical simulations, these values are pulled from the simulation file. | . | Initial_Mass | the stellar mass of each star particle at the birth of the star (used for scaling spectra). For nbody models, these values are assigned by the function. We assume that the star has doubled in mass since its birth by default. For any hydrodynamical simulations, these values are pulled from the simulation file. | . | gas_part - A data.table element containing properties of each gas particle contained within the simulation. (NULL if no gas particles are present in the simulation.) . | ID | the unique gas particle ID number. | . | x, y and z | the gas particle positions in each of the 3 dimensions in kpc. | . | vx, vy, vz | the gas particle velocities in each of the 3 dimensions in km/s. | . | Mass | the gas particle mass in solar masses. | . | SFR | the instananeous star formation rate of the gas particle. | . | Density | the density of the gas within the simulation given in solar masses per kpc^3. | . | Temperature | the temperature of that gas particle in K. | . | SmoothingLength | the size of the the SPH smoothing kernel in kpc. | . | Metallicity | the smoothed gas mass of elements heavier than Helium divided by the mass of the particle. | . | Carbon | the fraction of carbon within the particle, given as a fraction of its total mass. | . | Hydrogen | the fraction of hydrogen within the particle, given as a fraction of its total mass. | . | Oxygen | the fraction of oxygen within the particle, given as a fraction of its total mass. | . | spectra - A data.table element containing the spectral flux associated with each particle, linked to each particle by the sed_id within the star_part element. Each row corresponds to the spectrum associated with an individual spectral ID. | wave - Numeric element containing the wavelengths in angstrom for the spectra in the element above. | . ",
    "url": "http://localhost:4000/SimSpin/docs/make_simspin_file.html#output-value",
    "relUrl": "/docs/make_simspin_file.html#output-value"
  },"25": {
    "doc": "make_simspin_file",
    "title": "Example",
    "content": "Using a Gadget model stored within the SimSpin software, we can write a SimSpin file directly to the R environment with all other defaults: . # Load a Gadget model... simulation_file = system.file(\"extdata\", \"SimSpin_example_Gadget\", package = \"SimSpin\") # ... use to build a SimSpin file. simspin_file = make_simspin_file(filename = simulation_file, write_to_file = FALSE) . Examining the SimSpin file produced, we can see that it contains: . summary(simspin_file) # Length Class Mode # header 8 -none- list # star_part 12 data.frame list # gas_part 0 -none- NULL # spectra 2 -none- list # wave 842 -none- numeric . | header is a list that contains details of the file you’ve just created. This allows you to recreate this file in the future using the same information. names(simspin_file$header) # [1] \"InputFile\" \"OutputFile\" \"Type\" \"Template\" # [5] \"Template_LSF\" \"Template_waveres\" \"Origin\" \"Date\" . | star_part is a data.frame that contains the stellar particle information for that simulation. As the input model was an N-body model, this is a summary of both the disk (PartType2) and bulge (PartType3) particle properties. If the input model was a hydrodynamic simulation, this would just contain the stellar particle information (PartType4). names(simspin_file$star_part) # [1] \"ID\" \"x\" \"y\" \"z\" \"vx\" # [6] \"vy\" \"vz\" \"Mass\" \"sed_id\" \"Metallicity\" # [11] \"Age\" \"Initial_Mass\" . | gas_part in this file is NULL as the input simulation was an N-body model. However, in the case that the input was a hydrodynamical simulation with gas particles, this would be a data.frame similar to star_part but summarising the gas particle properties instead. simspin_file[[\"gas_part\"]] # NULL . | spectra is a list where each element describes the flux at a given wavelength for one group of stellar particles. These have been generated within the function for a distinct group of stellar particle ages and metallicities using the specified template spectra. Mapping between stellar particles and their respective spectra is given by the sed_id within the star_part data.frame. Each number sed_id corresponds to the element within spectra list. Because the input simulation was an N-body model, we only have two associated spectra - one for the disk particles (with disk_age = 5 and disk_Z = 0.024) and one for the bulge particles (with bulge_age = 10 and bulge_Z = 0.001). simspin_file[[\"spectra\"]] #[[1]] # [1] 7.659288e-10 1.176103e-09 1.558386e-09 2.104659e-09 2.769032e-09 3.559435e-09 # [7] 4.178723e-09 5.006696e-09 6.134861e-09 8.460731e-09 1.130473e-08 1.429757e-08 # [13] ... [1221] #[[2]] # [1] 1.089325e-08 1.397532e-08 1.675843e-08 2.010100e-08 2.321242e-08 2.587942e-08 # [7] 2.695232e-08 2.921529e-08 3.182460e-08 4.229105e-08 4.810211e-08 5.303458e-08 # [13] ... [1221] . | Finally wave contains the wavelength values in units of angstrom for all of the spectra contained in the spectra list. simspin_file[[\"wave\"]] # [1] 91 94 96 98 100 102 104 106 108 110 114 118 121 125 # [15] 127 128 131 132 134 137 140 143 147 151 155 159 162 166 # [29] ... [1221] . | . ",
    "url": "http://localhost:4000/SimSpin/docs/make_simspin_file.html#example",
    "relUrl": "/docs/make_simspin_file.html#example"
  },"26": {
    "doc": "make_simspin_file",
    "title": "Notes",
    "content": "Spectral Template Choice . Spectral templates provide a grid of modelled spectra for a known stellar population. The grid associates a stellar age and metallicity to each spectrum in the template. These are used throughout integral field spectroscopy to determine the stellar population properties of the observed galaxy. In SimSpin, we follow this methodology in reverse. As opposed to fitting the spectrum to find the age and metallicity of the underlying stellar population, we use the stellar age and metallicity to assign a spectrum using the chosen template library. While the output is consistent between hydrodynamical and N-body models, we discuss the differences in methodology between these inputs below: . | Hydrodynamical simulations track the age and metallicity of each stellar particle. We use these parameters to select the spectrum that should be associated with each star. Individual particles are initially binned into groups of age and metallicity with width 20 Myr and 0.1 Z☉ respectively. Stellar particles that fall within each age-metallicity bin will be associated with a single spectrum. This simplification is made to reduce the number of spectra that need to be stored and hence optimise memory usage within SimSpin. | N-body models consider stellar particles as collisionless bulge and disk components, but do not model their the stellar properties of age and metallicity. These properties must be assigned before SimSpin can generate a spectrum. Of course, the values chosen will change the shape of the associated spectrum and the relative brightness of the individual constituents. Commonly, we assign different age and luminosity values to each population of particles to represent the younger, metal-rich disk and older, metal-poor bulge. This choice is arbitrary and depends on the science in question. To avoid systematic differences, the age and metallicity of all components can be set equal. | . Available spectral templates include: . | Name | Age Steps | Age Range (Gyr) | Z Steps | Z Range (Z☉) | λ Steps (Å) | λ Range (Å) | σLSF (Å) | . | BC03lr | 221 | 0 - 20 | 6 | 0.0001 - 0.05 | 842 | 91 - 20000 | 3 | . | BC03hr | 221 | 0 - 20 | 6 | 0.0001 - 0.05 | 6521 | 91 - 20000 | 3 | . | EMILES | 53 | 0.03 - 14 | 12 | 0.0001 - 0.04 | 20356 | 1680 - 20000 | 2.51 | . Now that you’ve built a SimSpin file, you can go one to set up the observations with a mock telescope… . Next Step: telescope . ",
    "url": "http://localhost:4000/SimSpin/docs/make_simspin_file.html#notes",
    "relUrl": "/docs/make_simspin_file.html#notes"
  },"27": {
    "doc": "make_simspin_file",
    "title": "make_simspin_file",
    "content": " ",
    "url": "http://localhost:4000/SimSpin/docs/make_simspin_file.html",
    "relUrl": "/docs/make_simspin_file.html"
  },"28": {
    "doc": "observing_strategy",
    "title": "Defining the properties of the object being observed",
    "content": "In order to build a data cube, we need to describe the conditions in which the observation has been made. Using the observing_strategy function, a single object is generated to describe the object specific properties such as the projected distance, the projected inclination, the pointing location and the level of seeing. This is used, along with the telescope object, to describe the specific observing conditions input to build_datacube. See an example See the source code . The following code shows the default parameters used in the observing_strategy function. Calling the function without specifying any input will produce an observing strategy object with the following properties: . observing_strategy(dist_z = 0.05, # projected distance to galaxy model inc_deg = 70, # projected angle, 0 deg (o) face on, 90 deg (-) edge on twist_deg = 0, # projected angle, 0 deg (o) face on, 90 deg (|) edge on pointing_kpc = c(0,0), # pointing of telescope centre relative to galaxy centre blur = F) # seeing conditions . ",
    "url": "http://localhost:4000/SimSpin/docs/observing_strategy.html#defining-the-properties-of-the-object-being-observed",
    "relUrl": "/docs/observing_strategy.html#defining-the-properties-of-the-object-being-observed"
  },"29": {
    "doc": "observing_strategy",
    "title": "Input Parameters",
    "content": "| dist_Mpc, dist_kpc_per_arcsec, dist_z | The projected distance at which the galaxy is placed. Only one of these three input parameters should be defined at once. Each input describes the projected distance in different units (1) distance in mega-parsec (Mpc) (2) distance as a spatial scale in kilo-parsec per arcsecond (kpc/’’) or (3) redshift distance. | . | inc_deg | The projected inclination of the observed galaxy relative to the z-axis - 0 deg places the galaxy face-on (o), 90 deg is edge-on aligned with the horizontal axis (-). Default is 70. | . | twist_deg | The projected inclination of the observed galaxy relative to the x-axis - 0 deg places the galaxy face-on (o), 90 deg is edge-on aligned with the vertical axis (|). Default is 0. | . | pointing_deg, pointing_kpc | A numeric array c(x,y) specifying the position at which the field-of-view is centred given as a shift relative to the centre at (0,0) in units of (1) degrees or (2) kilo-parsecs. Only one of these two parameters should be supplied. Default is c(0,0) offset. | . | blur | Should the observation be convolved with a PSF to mimic the effects of seeing conditions? If TRUE, the parameters below will describe the size and shape of this convolution kernel. | . | psf | The shape of the point-spread function with which the cube is convolved to generate a seeing-convolved observation. Options include “Gaussian” and “Moffat”. Only used if blur = TRUE . | . | fwhm | The size of the point-spread function kernel, as measured by the full-width half-maximum in arcseconds. Only used if blur = TRUE . | . ",
    "url": "http://localhost:4000/SimSpin/docs/observing_strategy.html#input-parameters",
    "relUrl": "/docs/observing_strategy.html#input-parameters"
  },"30": {
    "doc": "observing_strategy",
    "title": "Example",
    "content": "Start by initiallising an observing strategy using the default parameters: . strategy = observing_strategy() . We can inspect the object produced and see that the default parameters have been stored as a list. summary(strategy) # Length Class Mode # distance 1 Distance S4 # inc_deg 1 -none- numeric # twist_deg 1 -none- numeric # pointing 1 Pointing S4 # blur 1 -none- logical . To inspect individual properties of our observing strategy, use the named elements in one of two ways to achieve the same result: . strategy$inc_deg # [1] 70 strategy[[\"inc_deg\"]] # [1] 70 . The distance and pointing parameters are listed as S4 objects. When we examine each of these parameters, they will be formatted to include all definitions of distance/pointing, for example: . strategy$distance # Distance to observed galaxy is: # 227.4797 Mpc ---- physical distance, # 1.00032 kpc/'' - angular scale on the sky, # z = 0.05 -------- projected redshift distance. strategy$pointing # Pointing relative to observed galaxy centre at (0,0) is: # (x,y): (0,0) degrees -- # (x,y): (0,0) kpc ------ . In order to access individual components of these parameters, such as the projected distance to the galaxy in units of Mpc, we can use the S4 methods shown below: . z(strategy$distance) # [1] 0.05 Mpc(strategy$distance) # [1] 227.4797 kpc_per_arcsec(strategy$distance) # [1] 1.00032 xy_deg(strategy$pointing) # [1] 0 0 xy_kpc(strategy$pointing) # [1] 0 0 . Now that you’ve described the observing strategy, you can move on to building a mock observation… . Next Step: build_datacube . ",
    "url": "http://localhost:4000/SimSpin/docs/observing_strategy.html#example",
    "relUrl": "/docs/observing_strategy.html#example"
  },"31": {
    "doc": "observing_strategy",
    "title": "observing_strategy",
    "content": " ",
    "url": "http://localhost:4000/SimSpin/docs/observing_strategy.html",
    "relUrl": "/docs/observing_strategy.html"
  },"32": {
    "doc": "telescope",
    "title": "Defining the properties of the telescope",
    "content": "Recent Updates . In order to build a data cube, we need to describe the properties of the telescope used to observe the model. Using the telecope function, a single telescope object is generated with a set number of expected properties. These properties are used with the observing_strategy to describe a specific observation. You can fully specify the particulars of your chosen telescope or you can select from a number of inbuilt telescopes designed to mimic current IFS surveys. See an example See the source code . As of version 2.2.0, the method input parameter has been moved directly to the build_datacube function. For backwards compatibility, this parameter can still be specified here, but a warning will be issued. The following code shows the default parameters used in the telescope function. Calling the function without specifying any input will produce a telescope object with the following properties: . telescope(type=\"IFU\", # specify a type or define your own using \"IFU\" fov=15, # diameter of the field-of-view in arcsec aperture_shape=\"circular\", wave_range=c(3700,5700), # in angstrom wave_centre, # wave_centre is auto-generated if not supplied wave_res=1.04, # wavelength resolution in angstrom spatial_res=0.5, # spatial resolution in arcsec filter=\"r\", # luminosities output in this band lsf_fwhm=2.65, # spectral uncertainty due to instrument in angstrom signal_to_noise = 10) # target signal-to-noise ratio at any pixel . ",
    "url": "http://localhost:4000/SimSpin/docs/telescope.html#defining-the-properties-of-the-telescope",
    "relUrl": "/docs/telescope.html#defining-the-properties-of-the-telescope"
  },"33": {
    "doc": "telescope",
    "title": "Input Parameters",
    "content": "| type | A character string describing the type of telescope you wish to create. Default is \"IFU\", in which case the telescope properties are described by the input parameters to this function. Other input types include: \"SAMI\", \"MaNGA\", \"CALIFA\" and \"MUSE\". With these, the telescope properties are set to the default parameters specified by the respective instrument. | . | fov | A numeric describing the diameter of the field-of-view of the telescope in arcsec. | . | aperture_shape | A character string describing the shape of the field-of-view. Options include: \"circular\", \"hexagonal\", and \"square\". | . | wave_range | Two numeric parameters describing the beginning and end of the wavelength range visible to the telescope, given in angstrom. Format is expected c(wave_start, wave_end), and errors will be issued if not in this format. | . | wave_centre | A numeric parameter describing the centre of the wavelength range in angstrom. If no wave_centre is provided, SimSpin assumes that the central wavelength is at the centre of the wavelength range provided above. | . | wave_res | A numeric that gives the resolution of the wavelength axis of the telescope in angstrom. For a given wave_range, this resolution defines the width of the bins along that range. | . | spatial_res | A numeric that gives the resolution of the spatial axis of the telescope in arcsec. For a given fov, this resolution defines the width of the pixels within the observation produced. | . | filter | A character string that describes which band to use to calculate luminoisity at the telescope. Options include: \"r\", \"g\", \"u\", \"i\", and \"z\" and use the SDSS filter bandpass functions to compute the luminosity that would be detected in that band. | . | lsf_fwhm | A numeric describing the full-width half-maximum of the Gaussian line-spread-function of the telescope in units of angstrom, i.e. the spectral uncertainty of the underlying spectrograph used in the observation. | . | signal_to_noise | A numeric describing the target signal-to-noise ratio at any pixel. | . ",
    "url": "http://localhost:4000/SimSpin/docs/telescope.html#input-parameters",
    "relUrl": "/docs/telescope.html#input-parameters"
  },"34": {
    "doc": "telescope",
    "title": "Output Value",
    "content": "The output of telescope is a List element that will be stored as a variable to the environment. The list will contain the following 11 elements: . | type - Character element recording the requested telescope type. Must be one of \"IFU\", \"SAMI\", \"MaNGA\", \"MUSE\" or \"Hector\". | fov - Numeric element describing the diameter of the field-of-view in arcseconds. | aperture_shape - Character element recording the shape of the field-of-view. Must be one of \"circular\", \"hexagonal\" or \"square\". | wave_range - Numeric element of length 2 describing the beginning and end of the wavelength axis in angstrom. | wave_centre - Numeric element describing the centre of the wavelength axis in angstrom. | wave_res - Numeric element describing the width of each bin on the wavelength axis in angstrom. | spatial_res - Numeric element describing the width of each spatial pixel in arcseconds. | filter - A data.table element with two columns: . | wave | Numeric element describing the wavelengths at which the spectral reponse has been computed for a given spectral filter. | . | response | Numeric element describing the spectral response of that requested filter, given as a fraction. | . | lsf_fwhm - Numeric element describing the line-spread-function full-width-half-maximum of the spectrograph in the specified telescope. Given in units of angstrom. | signal_to_noise - Numeric element describing the maximum signal-to-noise ratio per pixel. | sbin - Numeric element describing the number of spatial pixels across the diameter of the aperture. | . ",
    "url": "http://localhost:4000/SimSpin/docs/telescope.html#output-value",
    "relUrl": "/docs/telescope.html#output-value"
  },"35": {
    "doc": "telescope",
    "title": "Example",
    "content": "Start by building a telescope using the default parameters: . scope = telescope() . We can inspect the object produced and see that the default parameters have been stored as a list. summary(scope) # Length Class Mode # type 1 -none- character # fov 1 -none- numeric # aperture_shape 1 -none- character # wave_range 2 -none- numeric # wave_centre 1 -none- numeric # wave_res 1 -none- numeric # spatial_res 1 -none- numeric # filter 2 data.table list # lsf_fwhm 1 -none- numeric # signal_to_noise 1 -none- numeric # sbin 1 -none- numeric . To inspect individual properties of our telescope, use the named elements in one of two ways to achieve the same result: . scope$type # [1] \"IFU\" scope[[\"type\"]] # [1] \"IFU\" . For pre-defined type classes, certain parameters cannot be modified. Values highlighted in purple below (for example, the field-of-view for a MaNGA telescope) can be selected by adding fov = 12 to the inputs. | telescope parameter | units | SAMI | MaNGA | CALIFA | MUSE | Hector | . | fov | arcsec | 15 | n = 12, 17, 22, 27 or 32 {: .text-purple-000} | 74 | n &lt; 60 {: .text-purple-000} | 30 | . | aperture_shape |   | “circular” | “hexagonal” | “hexagonal” | “square” | “hexagonal” | . | wave_range | Å1 | 3750 - 5750 | 3600 - 6350 | 3700 – 4750 | 4700.15 - 9351.4 | 3720 - 5910 | . | wave_centre | Å1 | 4800 | 4700 | 4225 | 6975 | 4815 | . | wave_res | Å | 1.04 | 1.04 | 2.7 | 1.25 | 1.60 | . | spatial_res | arcsec/pixel | 0.5 | 0.5 | 1 | 0.2 | 0.2 | . | lsf_fwhm | Å | 2.65 | 2.85 | 2.7 | 2.51 | 1.3 | . Now that you’ve initiallised the telescope, you can move on to describing the strategy of your observing run… . Next Step: observing_strategy . | Wave ranges and central wave lengths are quoted for the blue arm of each spectrograph as this is the wavelength range across which the kinematics are commonly measured. &#8617; &#8617;2 . | . ",
    "url": "http://localhost:4000/SimSpin/docs/telescope.html#example",
    "relUrl": "/docs/telescope.html#example"
  },"36": {
    "doc": "telescope",
    "title": "telescope",
    "content": " ",
    "url": "http://localhost:4000/SimSpin/docs/telescope.html",
    "relUrl": "/docs/telescope.html"
  },"37": {
    "doc": "write_simspin_fits",
    "title": "Writing the data cube produced to a FITS file",
    "content": "write_simspin_FITS() . ",
    "url": "http://localhost:4000/SimSpin/docs/write_simspin_FITS.html#writing-the-data-cube-produced-to-a-fits-file",
    "relUrl": "/docs/write_simspin_FITS.html#writing-the-data-cube-produced-to-a-fits-file"
  },"38": {
    "doc": "write_simspin_fits",
    "title": "write_simspin_fits",
    "content": " ",
    "url": "http://localhost:4000/SimSpin/docs/write_simspin_FITS.html",
    "relUrl": "/docs/write_simspin_FITS.html"
  }
}
