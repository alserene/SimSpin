% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/find_lambda.R
\name{find_lambda}
\alias{find_lambda}
\title{Measuring observable galaxy kinematics.}
\usage{
find_lambda(filename, ptype = NA, r200 = 200, z, fov, ap_shape, central_wvl,
  lsf_fwhm, pixel_sscale, pixel_vscale, inc_deg, m2l_disc, m2l_bulge, threshold,
  measure_type = list(type = "fit", fac = 1), blur,
  dispersion_analysis = FALSE)
}
\arguments{
\item{filename}{The Gadget file containing the particle information of the galaxy to be analysed.}

\item{ptype}{The particle type/types to be extracted - NA (default) gives all particles in the simulation, 1 - gas, 2 - dark matter,
3 - disc, 4 - bulge, 5 - stars, 6 - boundary.}

\item{r200}{The virial radius specified in the simulation, kpc.}

\item{z}{The galaxy redshift.}

\item{fov}{The field of view of the IFU, diameter in arcseconds.}

\item{ap_shape}{The shape of the field of view, with options "circular", "square" or "hexagonal".}

\item{central_wvl}{The central filter wavelength used for the observation, given in angstroms.}

\item{lsf_fwhm}{The line spread function full-width half-max, given in angstroms.}

\item{pixel_sscale}{The corresponding spatial pixel scale associated with a given telescope output in arcseconds.}

\item{pixel_vscale}{The corresponding velocity pixel scale associated with a given telescope filter output in angstroms.}

\item{inc_deg}{The inclination at which to observe the galaxy in degrees.}

\item{m2l_disc}{The mass-to-light ratio of the disc component in solar units.}

\item{m2l_bulge}{The mass-to-light ratio of the bulge component in solar units.}

\item{threshold}{The flux threshold of the observation.}

\item{measure_type}{A list specifying the radius within which $\lambda_R$ is measured. If \code{list(type = "fit", fac = 1)},
\eqn{\lambda_R} is measured in a specified multiple of $R_{eff}$, where $R_{eff}$ has been calculated from the unblurred galaxy
counts image. If \code{list(type = "specified", fac = 1, axis_ratio = data.frame("a" = 2, "b" = 1))}, $\lambda_R$ is calculated
within some factor of the effective radius, \code{fac *} $R_{eff}$ with specified axis ratio externally as a data frame in units of kpc.}

\item{blur}{\emph{Optional} Specify if you wish to apply observational seeing effects to the cube. A list of the form
\code{list("psf" = "Moffat", "fwhm" = 0.5)}. \code{"psf"} specifies the shape of the PSF chosen and may be either \code{"Moffat"}
or \code{"Gaussian"}. \code{"fwhm"} is a numeric specifying the full-width half-maximum of the PSF given in units of arcseconds.}

\item{dispersion_analysis}{\emph{Optional} If specified as \code{TRUE}, the code will output the mean and median values of the LOS velocity
dispersion. Default is \code{FALSE}.}
}
\value{
A list containing the 3D array corresponding to the kinematic data cube (\code{$datacube}), the corresponding axes labels
(\code{$xbin_labels, $ybin_labels, $vbin_labels}), the axis ratio of the observed galaxy (\code{$axis_ratio}), observed \eqn{\lambda_R}
(\code{$lambda_R$}), the observational images (\code{$counts_img, $velocity_img, $dispersion_img}), the observed measurement radius
(\code{$reff_ellipse}) and optionally, specified by dispersion_analysis, the mean and median values of the LOS velocity dispersion
(\code{$dispersion_analysis}). The observational images will also be plotted.
}
\description{
The purpose of this basic function is to use the \code{SimSpin} package sub-functions to measure the observable spin parameter, \eqn{\lambda_R},
of a simulated galaxy model. \code{find_lambdar()} will call each required sub-function (\code{obs_data_prep()}, \code{ifu_cube()},
\code{blur_cube()}, \code{find_reff()}, \code{obs_lambda()} and \code{plot_ifu()}) and return the \eqn{\lambda_R} within a user specified
measurement radius.
}
\examples{
\dontrun{
lambdar = find_lambda(filename     = "path/to/some/snapshot_XXX",
                      r200         = 200,
                      z            = 0.1,
                      fov          = 15,
                      ap_shape     = "circular",
                      central_wvl  = 4800,
                      lsf_fwhm     = 2.65,
                      pixel_sscale = 0.5,
                      pixel_vscale = 1.04,
                      inc_deg      = 0,
                      m2l_disc     = 2,
                      m2l_bulge    = 1,
                      threshold    = 25,
                      measure_type = list(type = "fit", fac = 1))

lambdar = find_lambda(filename              = "path/to/some/snapshot_XXX",
                      r200                  = 200,
                      z                     = 0.1,
                      fov                   = 15,
                      ap_shape              = "circular",
                      central_wvl           = 4800,
                      lsf_fwhm              = 2.65,
                      pixel_sscale          = 0.5,
                      pixel_vscale          = 1.04,
                      inc_deg               = 0,
                      m2l_disc              = 2,
                      m2l_bulge             = 1,
                      threshold             = 25,
                      measure_type          = list(type = "specified", axis_ratio = data.frame("a" = 3.5, "b" = 1.7), fac = 1),
                      dispersion_analysis   = TRUE)

lambdar = find_lambda(filename              = "path/to/some/snapshot_XXX",
                      r200                  = 200,
                      z                     = 0.1,
                      fov                   = 15,
                      ap_shape              = "circular",
                      central_wvl           = 4800,
                      lsf_fwhm              = 2.65,
                      pixel_sscale          = 0.5,
                      pixel_vscale          = 1.04,
                      inc_deg               = 0,
                      m2l_disc              = 2,
                      m2l_bulge             = 1,
                      threshold             = 25,
                      measure_type          = list(type = "fit", fac = 1),
                      blur                  = list("psf" = "Moffat", "fwhm" = 2)
                      dispersion_analysis   = FALSE)

}
}
