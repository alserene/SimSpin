% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/obs_kinematics.R
\name{obs_kinematics}
\alias{obs_kinematics}
\title{Calculating the observed kinematics, \eqn{\lambda_R} and V/\eqn{\sigma}}
\usage{
obs_kinematics(ifu_datacube, reff_axisratio, sbinsize,
  radius_type = "Both")
}
\arguments{
\item{ifu_datacube}{The list output from the function \code{\link{ifu_cube}} containing the mock
IFU cube and the apperture region image (\code{$appregion}).}

\item{reff_axisratio}{The semi-major and semi-minor axes output from the \code{\link{find_reff}}
function.}

\item{sbinsize}{The size of each spatial bin in kpc, output from the function
\code{\link{obs_data_prep}}.}
}
\value{
Returns a list that contains:
\item{\code{$obs_lambdar}}{The observed spin parameter \eqn{\lambda_R} measured with circular
radii. \emph{(When \code{radius_type = "Both"} or \code{"Circular"}.)}}
\item{\code{$obs_elambdar}}{The observed spin parameter \eqn{\lambda_R} measured with elliptical
radii. \emph{(When \code{radius_type = "Both"} or \code{"Elliptical"}.)}}
\item{\code{$obs_vsigma}}{The observed V/\eqn{\sigma} value.}
\item{\code{$counts_img}}{The observed flux image.}
\item{\code{$velocity_img}}{The observed line-of-sight velocity image.}
\item{\code{$dispersion_img}}{The observed line-of-sight velocity dispersion image.}
}
\description{
The purpose of this function is to calculate the spin parameter, \eqn{\lambda_R},
and ratio V/\eqn{\sigma} that would be observed given an IFU data cube. You can either
supply the cube created by the \code{\link{ifu_cube}} function directly, or the blurred
cube created by \code{\link{blur_cube}}.
}
\examples{
 galaxy_data = sim_data(system.file("extdata", 'SimSpin_example.hdf5', package="SimSpin"))
 data        = obs_data_prep(simdata = galaxy_data)
 ifucube     = ifu_cube(obs_data = data, threshold = 20)
 reff_data = find_reff(simdata      = galaxy_data,
                       r200         = 200,
                       inc_deg      = 0,
                       axis_ratio   = ifucube$axis_ratio,
                       angular_size = data$angular_size)

 output = obs_kinematics(ifu_datacube   = ifucube,
                         reff_axisratio = reff_data,
                         sbinsize       = data$sbinsize)

}
