% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/build_datacube.R
\name{build_datacube}
\alias{build_datacube}
\title{A function for making a mock spectral cube}
\usage{
build_datacube(
  simspin_file,
  telescope,
  observing_strategy,
  verbose = F,
  write_fits = F,
  output_location
)
}
\arguments{
\item{simspin_file}{The path to the location of the SimSpin .fst file.}

\item{telescope}{An object of the telescope class describing the
specifications of the observing telescope (i.e. field of view, spatial
resolution, wavelength resolution, etc.).}

\item{observing_strategy}{An object of the observing_strategy class that
describes the properties of the observed simulation (i.e. redshift,
inclination, seeing conditions).}

\item{verbose}{Default is \code{FALSE}. If you would like the code to give
updates about its progress, change this parameter to \code{TRUE}.}

\item{write_fits}{Default is \code{FALSE}. If you would like the code to
output a FITS file, change this parameter to \code{TRUE}.}

\item{output_location}{Optional parameter that describes the path to the FITS
file output if \code{write_fits = TRUE}. If \code{write_fits = TRUE} and no
\code{output_location} is specified, the FITS file will be written to the
same directory as the input \code{simspin_file}.}
}
\value{
Returns an .fits file that contains a the generated spectral cube and
relevant header describing the mock observation.
}
\description{
The purpose of this function is to generate a mock spectral IFU data cube from
a SimSpin file, as generated using the \code{make_simspin_file()} function.
}
\examples{
\dontrun{
ss_eagle = system.file("extdata", "SimSpin_example_EAGLE.hdf5", package = "SimSpin")
temp_loc = tempdir()
make_simspin_file(ss_eagle, output = paste(temp_loc, "spectra.fst", sep=""))
cube = build_datacube(simspin_file = paste(temp_loc, "spectra.fst", sep=""),
                     telescope = telescope(type="SAMI"),
                     observing_strategy = observing_strategy())
unlink(paste(temp_loc, "spectra.fst", sep=""))
}

}
