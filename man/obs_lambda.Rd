% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/obs_lambda.R
\name{obs_lambda}
\alias{obs_lambda}
\title{Calculating the observable spin parameter, \eqn{\lambda}_R.}
\usage{
obs_lambda(ifu_images, reff_axisratio, sbinsize, psf = "Gaussian", fwhm,
  angular_size = NULL)
}
\arguments{
\item{ifu_images}{The list output from the function \code{ifu_img()} containing the mock IFU images (\code{$counts_img},
\code{$velocity_img}, \code{$dispersion_img}) and the apperture region image (\code{$appregion}).}

\item{reff_axisratio}{The semi-major and semi-minor axes output from the \code{find_reff()} function.}

\item{sbinsize}{The size of each spatial bin in kpc, output from the function \code{obs_data_prep()}.}

\item{psf}{\emph{Optional} This parameter gives the user choice between a "Gaussian" or "Moffat" PSF. The default is Gaussian.}

\item{fwhm}{\emph{Optional} This parameter will blur the observation using the specified PSF with full width half maximum as
specified here in arcseconds, in order to mimic the effects caused by beam smearing and seeing.}

\item{angular_size}{\emph{Optional} This parameter only needs to be specified if a fwhm is given. The conversion factor for a given redshift between
kpc and arcseconds as produced by the \code{obs_data_prep()} function.}
}
\value{
Returns a list that contains the observed \eqn{\lambda}_R value (\code{$obs_lambdar}), and three matricies reflecting the images produced
in IFU surveys - a luminosity counts image (\code{$counts_img}), a velocity image (\code{$velocity_img}) and a velocity dispersion image
(\code{$dispersion_img}) and the coordinates of the effective radius ellipse within which \eqn{\lambda}_R is measured.
}
\description{
The purpose of this function is to calculate the spin parameter that would be observed given an IFU data cube.
This function will also mimic the spatial blurring caused by seeing and beam smearing if the \code{fwhm} parameter is supplied.
}
\examples{
\dontrun{
 data      = obs_data_prep()
 ifu_imgs  = ifu_img()
 reff_data = find_reff()

 obs_lambda(ifu_images     = ifu_imgs,
            reff_axisratio = reff_data,
            sbinsize       = data$sbinsize)

 obs_lambda(ifu_images     = ifu_imgs,
            reff_axisratio = reff_data,
            sbinsize       = data$sbinsize,
            psf            = "Moffat",
            fwhm           = 0.5,
            angular_size   = data$angular_size)
}

}
